
const DragAndDropArea = function()  {
  const  [dragArea, setDrag] = useState({
    isDragActive: false,
    filesDroped: []
  })

  const handleDrop = function(e: DragEvent<HTMLDivElement> ) {
    e.preventDefault()
    e.stopPropagation()
    let filesToPush = []
  
    if(e.dataTransfer.files && e.dataTransfer.files[0]) {
      const filesRecieved = e.dataTransfer.files
      for (const file in filesRecieved) {
        if(typeof(filesRecieved[file]) === 'object') {
          setDrag({...dragArea, ...dragArea.filesDroped.push(filesRecieved[file])})
        }
      }
    }
    setDrag({...dragArea, isDragActive: false})
  }

  const inputHandleChange = function(e: ChangeEvent<HTMLInputElement>) {
    console.log(e.target.files)
  }

  const handleDrag = function(e: DragEvent<HTMLFormElement | HTMLDivElement>) {
    e.preventDefault()
    e.stopPropagation()
    
    if(e.type === 'dragenter' || e.type === 'dragover') {
      setDrag({...dragArea, isDragActive: true})
    } else if(e.type === 'dragleave') {
      setDrag({...dragArea, isDragActive: false})
    } 
  }



            {/* 
                the draggable area have other elements that are not part of the
                draggable area itself, so it calls dragLeave method. To solve this
                issue, we create a div that will cover all the elements on that area
                and keep dragOver activated and its gonna be hidden when we leave.
            */}
            { dragArea.isDragActive && 
                <div className="absolute w-full h-full inset-0 rounded-2xl" 
                onDragEnter={handleDrag} 
                onDragLeave={handleDrag} 
                onDragOver={handleDrag}
                onDrop={handleDrop}>
                </div>
              } 